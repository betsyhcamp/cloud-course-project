############################
# --- Package Settings --- #
############################

[project]
name = "cloud-course-project"
description = "package description"
authors = [{ name = "Elizabeth H. Camp", email = "betsy.h.camp@gmail.com" }]
readme = "README.md"
requires-python = ">=3.8"
license = { text = "MIT" }
dependencies = [
    "boto3",
    "fastapi",
    "pydantic-settings",
    "python-multipart",
    "openai",
    "httpx",
]
classifiers = ["Programming Language :: Python :: 3"]
keywords = ["one", "two"]

# version will be derived dynamically from version.txt via setuptools
dynamic = ["version"]

# docs: https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html#dynamic-metadata
[tool.setuptools.dynamic]
version = { file = "version.txt" }

# optional dependencies can be installed with square brackets, e.g. `pip install my-package[test,static-code-qa]`
[project.optional-dependencies]
api = ["uvicorn", "moto[server]"]
package_manager = ["uv"]
stubs = ["boto3-stubs[s3]"]
notebooks = ["jupyterlab", "ipykernel", "rich", "jupytext"]
test = ["pytest", "pytest-cov", "moto[s3]"]
release = ["build", "twine"]
static-code-qa = [
    "pre-commit",
    "pylint",
    "black",
    "isort",
    "flake8",
    "flake8-docstrings",
    "Flake8-pyproject",
    "radon",
]

# See .vscode/settings.json to see how VS Code is configured to use these tools
dev = [
    "cloud-course-project[api,package_manager,stubs,notebooks,test,release,static-code-qa]",
]

[build-system]
# Minimum requirements for the build system to execute.
requires = ["setuptools>=61.0.0", "wheel"]
build-backend = "setuptools.build_meta"

# include more than only .py files in the distribution package (wheel)
[tool.setuptools.package-data]
files_api = ["*.json"]


##############################
# --- Code Quality Tools --- #
##############################

[tool.pytest.ini_options]
markers = ["slow: marks tests as slow (deselect with '-m \"not slow\"')"]

[tool.black]
line-length = 119
# regular expression ignoring multiple patterns separated by '|' and newlines
exclude = '''
/(
    \.venv
  | venv
)/
'''

[tool.flake8]
docstring-convention = "all"
ignore = [
    "D107",
    "D212",
    "E501",
    "W503",
    "W605",
    "D203",
    "D100",

    "F841",
    "D202",
    "D412",
    "D400",
    "D413",
    "D407",
    "D415",
    "D104",
    "D213",
    "D103",
    "D101",
    "D105",
    "E402",
    "D209",
    "D205",
    "D200",
    "F401",
]
exclude = [".venv"]
max-line-length = 119

# radon
radon-max-cc = 10

[tool.isort]
profile = "black"
multi_line_output = "VERTICAL_HANGING_INDENT"
force_grid_wrap = 2
line_length = 119

[tool.pylint."messages control"]
disable = [
    "line-too-long",
    "trailing-whitespace",
    "missing-function-docstring",
    "consider-using-f-string",
    "import-error",
    "too-few-public-methods",
    "redefined-outer-name",

    "missing-module-docstring",
    "redefined-builtin",
    "wrong-import-position",
    "unused-argument",
    "invalid-name",
    "no-else-raise",
    "raise-missing-from",
    "inconsistent-return-statements",
    "pointless-statement",
    "reimported",
    "pointless-string-statement",
    "ungrouped-imports",
    "missing-module-docstring",
    "no-name-in-module",
    "unused-variable",
    "wrong-import-order",
    "missing-class-docstring",
    "unused-variable",
    "unsupported-binary-operation",
    "unsubscriptable-object",
    "unused-import",

]


[tool.mypy]
disable_error_code = ["syntax", "misc", "arg-type", "no-redef"]
ignore_missing_imports = true
